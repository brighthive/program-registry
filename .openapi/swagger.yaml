swagger: '2.0'
info:
  description: "The OpenAPI spec for the Programs Registry API. For this service, you may use the api key `special-key` to test the authorization filters."
  version: "1.0.0"
  title: "Programs Registry"
  contact:
    email: "engineering@brighthive.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: programs-registry.brighthive.net
basePath: "/api"
schemes:
- "https"
paths:
  /providers:
    post:
      tags:
      - "provider"
      summary: "Add new provider organization"
      description: ""
      operationId: provider.post
      consumes:
      - "application/json"
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Provider organization object that needs to be added to the registry"
        required: true
        schema:
          $ref: "#/definitions/Provider"
      responses:
        201:
          description: "Creation successful"
          schema:
            $ref: "#/definitions/Provider"
        204:
          description: "No content"
        400:
          description: "Bad request"
    get:
      tags:
      - "provider"
      summary: "Get all provider organizations"
      description: "Return a list of all provider organizations"
      operationId: provider.get
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "name"
        description: "Name (in part or full) of provider organizations"
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Provider"
        404:
          description: "Provider organization not found"
  /providers/{organizationId}:
    get:
      tags:
      - "provider"
      summary: "Get provider organization by ID"
      description: "Returns a single provider organization"
      operationId: provider.get.id
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: organizationId
        description: "ID of provider organization to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Provider"
        404:
          description: "Provider organization not found"
      security:
      - api_key: []
    put:
      tags:
      - "provider"
      summary: "Update provider organization"
      description: "Edit the attributes of an existing provider organization"
      operationId: provider.put
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path" 
        name: organizationId
        description: "Numeric ID of provider organization to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated provider organization object"
        required: true
        schema:
          $ref: "#/definitions/Provider"
      responses:
        202:
          description: "Update accepted"
          schema:
            $ref: "#/definitions/Provider"
        304:
          description: "Not modified"
        404:
          description: "Provider organization not found"
    delete:
      tags:
      - "provider"
      summary: "Delete provider organization"
      description: ""
      operationId: provider.delete
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: organizationId
        description: "Numeric ID of organization to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        202:
          description: "Deletion accepted"
        304:
          description: "Not modified"
        404:
          description: "Provider organization not found"
  /providers/{organizationId}/programs:
    post:
      tags:
      - "provider"
      summary: "Add new provider program"
      description: ""
      operationId: provider.program.post
      consumes:
      - "application/json"
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: organizationId
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Program to be added for the provider organization"
        required: true
        schema:
          $ref: "#/definitions/Program"
      responses:
        201:
          description: "Creation successful"
          schema:
            $ref: "#/definitions/Program"
        204:
          description: "No content"
        400:
          description: "Bad request"
    get:
      tags:
      - "provider"
      summary: "Get all provider programs"
      description: "Return a list of all provider's programs"
      operationId: provider.program.get.all
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: organizationId
        required: true
        type: "integer"
        format: "int64"
      - in: "query"
        name: "name"
        description: "Name (in part or full) of provider program(s)"
        type: "string"
      - in: "query"
        name: "cip"
        description: "Program CIP representing category of provider program(s)"
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Program"
        404:
          description: "Provider program not found"
  /providers/{organizationId}/programs/{programId}:
    get:
      tags:
      - "provider"
      summary: "Get provider program by ID"
      description: ""
      operationId: provider.program.get.id
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: organizationId
        required: true
        type: "integer"
        format: "int64"
      - in: "path"
        name: programId
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Program"
        404:
          description: "Provider program not found"
      security:
      - api_key: []
    put:
      tags:
      - "provider"
      summary: "Update existing provider program"
      operationId: provider.program.put
      consumes:
      - "application/json"
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: organizationId
        description: "ID of organization that owns the program"
        required: true
        type: "integer"
        format: "int64"
      - in: "path"
        name: programId
        description: "ID of program to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated attributes of provider program"
        required: true
        schema:
          $ref: "#/definitions/Program"
      responses:
        202:
          description: "Update accepted"
          schema:
            $ref: "#/definitions/Program"
        404:
          description: "Program not found"
  /providers/{organizationId}/services:
    post:
      tags:
      - "provider"
      summary: "Add new provider service"
      description: ""
      operationId: provider.service.post
      consumes:
      - "application/json"
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: organizationId
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Service object to be added for provider"
        required: true
        schema:
          $ref: "#/definitions/Service"
      responses:
        201:
          description: "Creation successful"
          schema:
            $ref: "#/definitions/Service"
        204:
          description: "No content"
        400:
          description: "Bad request"
    get:
      tags:
      - "provider"
      summary: "Get all provider services"
      operationId:  provider.service.get.all
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: organizationId
        required: true
        type: "integer"
        format: "int64"
      - in: "query"
        name: "name"
        description: "The name(in full or part) of provider services to find"
        type: "string"
      - in: "query"
        name: "status"
        description: "The status of provider services to find"
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Service"
        404:
          description: "Provider service not found"
      security:
      - api_key: []
  /providers/{organizationId}/services/{serviceId}:
    get:
      tags:
      - "provider"
      summary: "Get provider service by ID"
      description: ""
      operationId:  provider.service.get.id
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: organizationId
        description: "ID of provider organization"
        required: true
        type: "integer"
        format: "int64"
      - in: "path"
        name: serviceId
        description: "ID of provider service"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Service"
        404:
          description: "Provider service not found"
    put:
      tags:
      - "provider"
      summary: "Update existing provider service"
      operationId:  provider.service.put
      consumes:
      - "application/json"
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: organizationId
        description: "ID of provider organization that offers the service"
        required: true
        type: "integer"
        format: "int64"
      - in: "path"
        name: serviceId
        description: "ID of the provider service to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated provider service attributes"
        required: true
        schema:
          $ref: "#/definitions/Service"
      responses:
        202:
          description: "Update accepted"
          schema:
            $ref: "#/definitions/Service"
        404:
          description: "Provider service not found"
          
  # NOT IMPLEMENTED
  /providers/{organizationId}/locations:
    post:
      tags:
      - "provider"
      summary: "Add new provider location"
      operationId: provider.location.post
      parameters:
      - in: "path"
        name: organizationId
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Location"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Location"
    get:
      tags:
      - "provider"
      summary: "Get all provider locations"
      operationId: provider.location.get
      parameters:
      - in: "path"
        name: organizationId
        required: true
        type: "integer"
        format: "int64"
      - in: "query"
        name: "name"
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Location"
  
  # NOT IMPLEMENTED    
  /providers/{organizationId}/locations/{locationId}:
    get:
      tags:
      - "provider"
      summary: "Get provider location by ID"
      operationId: provider.location.get.id
      parameters:
      - in: "path"
        name: organizationId
        required: true
        type: "integer"
        format: "int64"
      - in: "path"
        name: locationId
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Location"
    put:
      tags:
      - "provider"
      summary: "Update provider location" 
      operationId: provider.location.put
      parameters:
      - in: "path"
        name: organizationId
        required: true
        type: "integer"
        format: "int64"
      - in: "path"
        name: locationId
        required: true
        type: "integer"
        format: "int64"
      responses:
        202:
          description: "Accepted"
          schema:
            $ref: "#/definitions/Location"

  /programs:
    post:
      tags:
      - "program"
      summary: "Add new program"
      description: ""
      operationId: program.post
      consumes:
      - "application/json"
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Program to be added to the registry"
        required: true
        schema:
          $ref: "#/definitions/Program"
      responses:
        201:
          description: "Creation successful"
          schema:
            $ref: "#/definitions/Program"
        204:
          description: "No content"
        400:
          description: "Bad request"
    get:
      tags:
      - "program"
      summary: "Get all programs"
      operationId: program.get
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "name"
        description: "Name (in part or full) of program(s)"
        type: "string"
      - in: "query"
        name: "cip"
        description: "Program CIP representing category of program(s)"
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Program"
        404:
          description: "Program not found"
  /programs/{programId}:
    get:
      tags:
      - "program"
      summary: "Get program by ID"
      description: ""
      operationId: program.get.id
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: programId
        description: "Numeric ID of program to update"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Program"
        404:
          description: "Program not found"
      security:
      - api_key: []
    put:
      tags:
      - "program"
      summary: "Update existing program"
      description: ""
      operationId: program.put
      consumes:
      - "application/json"
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: programId
        description: "Numeric ID of program to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Program attributes to update"
        required: true
        schema:
          $ref: "#/definitions/Program"
      responses:
        202:
          description: "Update accepted"
          schema:
            $ref: "#/definitions/Program"
        304:
          description: "Not modified"
        404:
          description: "Program not found"
    delete:
      tags:
      - "program"
      summary: "Delete program"
      description: "Delete a program given its ID"
      operationId: program.delete
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - in: "path"
        name: programId
        description: "Numeric ID of program to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        202:
          description: "Delete accepted"
          schema:
            $ref: "#/definitions/Program"
        304:
          description: "Not modified"
        404:
          description: "Program not found"

  # NOT IMPLEMENTED
  /programs/{programId}/services:
    post:
      tags:
      - "program"
      summary: "Add new program service"
      operationId: program.service.post
      parameters:
      - in: "path"
        name: programId
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Service"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Service"
    get:
      tags:
      - "program"
      summary: "Get all program services"
      operationId: program.service.get.all
      parameters:
      - in: "query"
        name: "name"
        description: "The name(in full or part) of program service(s) to find"
        type: "string"
      - in: "query"
        name: "status"
        description: "The status of program services to find"
        type: "string"
      - in: "path"
        name: programId
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Service"
  
  # NOT IMPLEMENTED    
  /programs/{programId}/services/{serviceId}:
    get:
      tags:
      - "program"
      summary: "Get program service by ID"
      operationId: program.service.get.id
      parameters:
      - in: "path"
        name: programId
        required: true
        type: "integer"
        format: "int64"
      - in: "path"
        name: serviceId
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Service"
    put:
      tags:
      - "program"
      summary: "Update program service" 
      operationId: program.service.put
      parameters:
      - in: "path"
        name: programId
        required: true
        type: "integer"
        format: "int64"
      - in: "path"
        name: serviceId
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Service"
      responses:
        202:
          description: "Accepted"
          schema:
            $ref: "#/definitions/Service"

  /services:
    post:
      tags:
      - "service"
      summary: "Add new service"
      description: ""
      operationId: service.post
      consumes:
      - "application/json"
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Service object that needs to be added to the registry"
        required: true
        schema:
          $ref: "#/definitions/Service"
      responses:
        201:
          description: "Creation successful"
          schema:
            $ref: "#/definitions/Service"
        204:
          description: "No content"
        400:
          description: "Bad request"
    get:
      tags:
      - "service"
      summary: "Get all services"
      description: "Get list of all services"
      operationId:  service.get.all
      produces:
      - "application/json"
      parameters:
      - in: "query"
        name: "name"
        description: "The name(in full or part) of service(s) to find"
        type: "string"
      - in: "query"
        name: "status"
        description: "The status of service(s) to find"
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Service"
        404:
          description: "Service not found"
      security:
      - api_key: []
  /services/{serviceId}:
    get:
      tags:
      - "service"
      summary: "Get service by ID"
      description: ""
      operationId: service.get
      produces:
      - "application/json"
      parameters:
      - name: serviceId
        in: path
        description: "Numeric ID of service"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Service"
        404:
          description: "Service not found"
    put:
      tags:
      - "service"
      summary: "Update service"
      description: ""
      operationId:  service.put
      consumes:
      - "application/json"
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: serviceId
        description: "Numeric ID of the service to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated service object"
        required: true
        schema:
          $ref: "#/definitions/Service"
      responses:
        202:
          description: "Update accepted"
          schema:
            $ref: "#/definitions/Service"
        304:
          description: "Not modified"
        404:
          description: "Service not found"
    delete:
      tags:
      - "service"
      summary: "Delete service"
      description: "Delete a service given its ID"
      operationId:  service.delete
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: serviceId
        description: "Numeric ID of the service to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        202:
          description: "Deletion accepted"
        304:
          description: "Not modified"
        404:
          description: "Service not found"
          
  # NOT IMPLEMENTED
  /services/{serviceId}/locations:
    post:
      tags:
        - "service"
      summary: "Add new service location"
      operationId: service.location.post
      parameters:
      - in: "path"
        name: serviceId
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Location"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Location"
    get:
      tags:
      - "service"
      summary: "Get services locations"
      operationId: service.location.get.all
      parameters:
      - in: "query"
        name: "name"
        description: "The name(in full or part) of service(s) location"
        type: "string"
      - in: "path"
        name: serviceId
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Location"
  
  # NOT IMPLEMENTED
  /service/{serviceId}/locations/{locationId}:
    get:
      tags:
      - "service"
      summary: "Get service location by ID"
      operationId: service.location.get.id
      parameters:
      - in: "path"
        name: serviceId
        required: true
        type: "integer"
        format: "int64"
      - in: "path"
        name: locationId
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Location"
    put:
      tags:
      - "service"
      summary: "Update service location" 
      operationId: service.location.put
      parameters:
      - in: "path"
        name: serviceId
        required: true
        type: "integer"
        format: "int64"
      - in: "path"
        name: locationId
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Location"
      responses:
        202:
          description: "Accepted"
          schema:
            $ref: "#/definitions/Location"
  
  # NOT IMPLEMENTED
  /locations:
    post:
      tags:
        - "location"
      summary: "Add new location"
      operationId: location.post
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Location"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Location"
    get:
      tags:
      - "location"
      summary: "Get all locations"
      operationId: location.get.all
      parameters:
      - in: "query"
        name: "name"
        description: "The name(in full or part) of location(s)"
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Location"
  
  # NOT IMPLEMENTED
  /locations/{locationId}:
    get:
      tags:
      - "location"
      summary: "Get location by ID"
      description: ""
      operationId: location.get.id
      produces:
      - "application/json"
      parameters:
      - name: locationId
        in: path
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Location"
    put:
      tags:
      - "location"
      summary: "Update existing location"
      description: ""
      operationId: location.put
      consumes:
      - "application/json"
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: locationId
        description: "Numeric ID of the location to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated location attributes"
        required: true
        schema:
          $ref: "#/definitions/Location"
      responses:
        202:
          description: "Accepted"
          schema:
            $ref: "#/definitions/Location"
    delete:
      tags:
      - "location"
      summary: "Delete existing location"
      description: ""
      operationId: location.delete
      produces:
      - "application/json"
      parameters:
      - name: locationId
        in: "path"
        description: "Numeric ID of the location to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        202:
          description: "Deletion accepted"
        304:
          description: "Not modified"
        404:
          description: "Location not found"
          
  # NOT IMPLEMENTED
  /locations/{locationId}/address:
    post:
      tags:
        - "location"
      summary: "Add new location address"
      operationId: location.address.post
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PhysicalAddress"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/PhysicalAddress"
    get:
      tags:
      - "location"
      summary: "Get all location addresses"
      operationId: location.address.get.all
      parameters:
      - in: "query"
        name: "city"
        description: "Name(in full or part) of city of location(s) address"
        type: "string"
      - in: "query"
        name: "state"
        description: "Name(in full or part) of state of location(s) address"
        type: "string"
      - in: "query"
        name: "zip"
        description: "Zip code of address of location(s)"
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PhysicalAddress"
  
  # NOT IMPLEMENTED
  /locations/{locationId}/address/{addressId}:
    get:
      tags:
      - "location"
      summary: "Get location address by ID"
      description: ""
      operationId: location.address.get.id
      produces:
      - "application/json"
      parameters:
      - name: locationId
        in: path
        required: true
        type: "integer"
        format: "int64"
      - name: addressId
        in: path
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PhysicalAddress"
    put:
      tags:
      - "location"
      summary: "Update existing location address"
      description: ""
      operationId: location.address.put
      consumes:
      - "application/json"
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: locationId
        in: path
        required: true
        type: "integer"
        format: "int64"
      - name: addressId
        in: path
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Updated location address attributes"
        required: true
        schema:
          $ref: "#/definitions/PhysicalAddress"
      responses:
        202:
          description: "Accepted"
          schema:
            $ref: "#/definitions/PhysicalAddress"
    delete:
      tags:
      - "location"
      summary: "Delete existing location address"
      description: ""
      operationId: location.address.delete
      produces:
      - "application/json"
      parameters:
      - name: locationId
        in: path
        required: true
        type: "integer"
        format: "int64"
      - name: addressId
        in: path
        required: true
        type: "integer"
        format: "int64"
      responses:
        202:
          description: "Deletion accepted"
        304:
          description: "Not modified"
        404:
          description: "Address not found"
          
  # NOT IMPLEMENTED
  /locations/{locationId}/services:
    get:
      tags:
      - "location"
      summary: "Get all services at location"
      description: "Returns a list of all services at location"
      operationId:  location.service.get.all
      produces:
      - "application/json"
      parameters:
      - name: locationId
        in: path
        required: true
        type: "integer"
        format: "int64"
      - in: "query"
        name: "name"
        description: "The name(in full or part) of service(s) to find"
        type: "string"
      - in: "query"
        name: "status"
        description: "The status of service(s) to find"
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Service"
        404:
          description: "Service not found"
  
  # NOT IMPLEMENTED
  /locations/{locationId}/services/{serviceId}:
    get:
      tags:
      - "location"
      summary: "Get service at location by ID"
      description: ""
      operationId: location.service.get
      produces:
      - "application/json"
      parameters:
      - name: locationId
        in: path
        required: true
        type: "integer"
        format: "int64"
      - name: serviceId
        in: path
        description: "Numeric ID of service"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Service"
        404:
          description: "Service not found"

securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Provider:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
      email:
        type: "string"
      url:
        type: "string"
      year_incorporated:
        type: "string"
    xml:
      name: "Provider"
  Program:
    type: "object"
    required:
    - "organization_id"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      organization_id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      alternate_name:
        type: "string"
    xml:
      name: "Program"
  Service:
    type: "object"
    required:
    - "name"
    - "organization_id"
    properties:
      id:
        type: "integer"
        format: "int64"
      organization_id:
        type: "integer"
        format: "int64"
      program_id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
      email:
        type: "string"
      url:
        type: "string"
      status:
        type: "string"
      fees:
        type: "string"
    xml:
      name: "Service"
  Location:
    type: "object"
    required:
    - "name"
    - "organization_id"
    properties:
      id:
        type: "integer"
        format: "int64"
      organization_id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      alternate_name:
        type: "string"
      description:
        type: "string"
      transportation:
        type: "string"
      latitude:
        type: "string"
      longitude:
        type: "string"
    xml:
      name: "Location"
  PhysicalAddress:
    type: object